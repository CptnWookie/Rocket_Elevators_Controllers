//Rocket Elevators Commercial Controller - Classic

"Inventory List
- Battery
- Column
- Elevators (Cages)
- Call Buttons
- Doors
- Floor Request Buttons
- Floor Display"


'DEFINE SECTION'
DEFINE battery USING id AND status AND numberOfColumn:
    ID: id,
    Status: status,
    ColumnsList: SET TO empty List,
    SEQUENCE createColumnsList USING numberOfColumn
        numberOfColumn = 4
        FOR EACH numberOfColumn
            ADD (INSTANTIATE column WITH "numberOfColumn" AND "Offline") TO ColumnsList
        ENDFOR
    ENDSEQUENCE
ENDDEFINE



DEFINE column USING id AND status AND numberOfFloors AND numberOfElevators:
    ID: id,
    Status: status,
    ElevatorsList: SET TO empty List,
    SEQUENCE createElevatorsList USING numberOfElevators
        numberOfElevators = 12
        FOR EACH numberOfElevators
            ADD (INSTANTIATE elevator WITH "numberOfElevators" AND "IDLE") TO elevatorsList
        ENDFOR
    ENDSEQUENCE
ENDDEFINE



DEFINE elevator USING id AND status AND directions AND numberOfFloors AND numberOfBasements
    ID: id,
    Status: status,
    Directions: directions,
    FloorRequestButtonList: SET TO empty List,
    SEQUENCE createFloorRequestButtonList USING numberOfFloors
        numberOfFloors = 60
        FOR EACH numberOfFloors
        ADD (INSTANTIATE floorRequestButton WITH numberOfFloors) TO floorRequestButtonList
        ENDFOR
    ENDSEQUENCE
ENDDEFINE



DEFINE callButton USING id AND status AND directions AND numberOfFloors
    ID: id,
    Status: status,
    Directions: directions,
    SEQUENCE createCallButtonList USING numberOfFloors
        FOR EACH numberOfFloors
            ADD(INSTANTIATE callButton WITH "UP" AND numberOfFloors) TO callButtonList
            ADD(INSTANTIATE callButton WITH "DOWN" AND numberOfFloors) TO callButtonList
        ENDFOR
    ENDSEQUENCE
ENDDEFINE



DEFINE doors USING id AND status AND numberOfFloors AND numberOfElevators
    ID: id,
    Status: status,
    ElevatorsDoorsList: SET TO empty List,
    SEQUENCE createElevatorsDoorsList USING numberOfElevators
        FOR EACH numberOfElevators
            ADD(INSTANTIATE doors WITH "Elevators" AND numberOfElevators) TO elevatorsDoorsList
        ENDFOR
    ENDSEQUENCE
    FloorDoorsList: SET TO empty List,
    SEQUENCE createFloorsDoorsList USING numberOfFloors AND numberOfElevators
        FOR EACH numberOfFloors
            ADD(INSTANTIATE doors WITH numberOfFloors AND numberOfElevators) to floorsDoorsList
        ENDFOR
    ENDSEQUENCE
ENDDEFINE



DEFINE floorDisplay USING id AND status AND numberOfFloors
    ID: id,
    Status: status,
    FloorsDisplayList: SET TO empty List,
    SEQUENCE createFloorDisplayList USING numberOfFloors
        FOR EACH numberOfFloors
            ADD(INSTANTIATE floorDisplay WITH numberOfFloors) TO FloorsDisplayList
        ENDFOR
    ENDSEQUENCE
ENDDEFINE

'DEFINE SECTION'

'------------------------------------------------------------------------------------------------'

'Sequence Section'

SEQUENCE initSystem USING numberOfColumn AND numberOfFloors AND numberOfElevators
    SET column1 TO INSTANTIATE column WITH 1 AND online
    CALL column1.createElevatorsList
ENDSEQUENCE



SEQUENCE assignElevatorsToColumn using elevatorsList
        FOR EACH column FROM ColumnsList
            ADD 3 elevators FROM elevatorsList
        ENDFOR
    ENDSEQUENCE



SEQUENCE requestElevators USING numberOfFloors AND directions
    IF callButton IS pressed
        READ callButton.directions AND callButton.numberOfFloors
        CALL findElevator WITH numberOfFloors AND directions RETURNING bestElevators
        SET bestElevators.status TO "Online"
        INIT moveElevators TO requestElevators.numberOfFloors WITH numberOfFloors AND directions
        THEN SET bestElevator.status TO "Idle"
        THEN SET elevatorsDoors.status TO "Open"
        THEN SET floorDoors.status TO "Open"
    ENDIF
ENDSEQUENCE   



SEQUENCE findElevator USING numberOfFloors AND directions
    READ column1.elevatorsList WITH numberOfFloors AND directions
ENDSEQUENCE

