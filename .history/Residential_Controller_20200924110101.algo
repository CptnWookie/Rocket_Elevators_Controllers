//Rocket Elevators Residential Controller

"Inventory List
- Column
- Elevators (Cages)
- Call Buttons
- Doors
- Floor Request Buttons"


'DEFINE SECTION'
DEFINE column USING id AND status AND numberOfFloors AND numberOfElevators:
    ID: id,
    Status: status,
    ElevatorsList: SET TO empty List,
    SEQUENCE createElevatorsList USING numberOfElevators
        numberOfElevators = 2
        FOR EACH numberOfElevators
            ADD (INSTANTIATE elevator WITH "numberOfElevators" AND "IDLE") TO elevatorsList
        ENDFOR
    ENDSEQUENCE
ENDDEFINE
SET column1 TO INSTANTIATE column WITH 1 AND online



DEFINE elevator USING id AND status AND directions AND numberOfFloors
    ID: id,
    Status: status,
    Directions: directions,
    FloorRequestButtonList: SET TO empty List,
    SEQUENCE createFloorRequestButtonList USING numberOfFloors
        numberOfFloors = 10
        FOR EACH numberOfFloors
        ADD (INSTANTIATE floorRequestButton WITH numberOfFloors) TO floorRequestButtonList
        ENDFOR
    ENDSEQUENCE
ENDDEFINE



DEFINE callButton USING id AND status AND directions AND numberOfFloors
    ID: id,
    Status: status,
    Directions: directions,
    SEQUENCE createCallButtonList USING numberOfFloors
        numberOfFloors = 10
        direction = "UP" or "DOWN"
        FOR EACH numberOfFloors
            ADD(INSTANTIATE callButton WITH "UP" AND numberOfFloors) TO callButtonList
            ADD(INSTANTIATE callButton WITH "DOWN" AND numberOfFloors) TO callButtonList
            REMOVE callButtonDOWN1 FROM callButtonList
            REMOVE callButtonUP10 FROM callButtonList
        ENDFOR
    ENDSEQUENCE
ENDDEFINE



DEFINE doors USING id AND status AND numberOfFloors AND numberOfElevators
    ID: id,
    Status: status,
    ElevatorsDoorsList: SET TO empty List,
    SEQUENCE createElevatorsDoorsList USING numberOfElevators
        numberOfElevators = 2
        FOR EACH numberOfElevators
            ADD(INSTANTIATE doors WITH "elevators" AND numberOfElevators) TO elevatorsDoorsList
        ENDFOR
    ENDSEQUENCE
    FloorDoorsList: SET TO empty List,
    SEQUENCE createFloorsDoorsList USING numberOfFloors AND numberOfElevators
        numberOfFloors = 10
        numberOfElevators = 2
        FOR EACH numberOfFloors
            ADD(INSTANTIATE doors WITH numberOfFloors AND numberOfElevators) to floorsDoorsList
        ENDFOR
    ENDSEQUENCE
ENDDEFINE



DEFINE initSystem USING numberOfFloors AND numberOfElevators
    SET column1 TO INSTANTIATE column WITH 1 AND numberOfFloors AND numberOfElevators AND online
    CALL column1.createElevatorsList
ENDDEFINE

'DEFINE SECTION'

'------------------------------------------------------------------------------------------------'

'Sequence Section'

SEQUENCE initSystem USING numberOfFloors AND numberOfElevators
    SET column1 TO INSTANTIATE column WITH 1 AND numberOfFloors AND numberOfElevators AND online
    CALL column1.createElevatorsList
ENDSEQUENCE



SEQUENCE requestElevators USING numberOfFloors AND directions
    IF callButton IS pressed
        READ callButton.direction AND callButton.numberOfFloors
        CALL findElevator WITH numberOfFloors
ENDSEQUENCE   



SEQUENCE findElevator
ENDSEQUENCE











SEQUENCE requestElevators USING numberOfFloors AND directions
    CALL findElevator WITH numberOfFloors AND directions returning bestElevator
ENDSEQUENCE   


SEQUENCE findElevator USING elevatorFloorLevel AND curentDirection
    READ elevatorFloorLevel AND curentDirection OF elevatorAA
    READ elevatorFloorLevel AND curentDirection OF elevatorAB     
ENDSEQUENCE


SEQUENCE bestElevator USING userFloorLevel, elevatorFloorLevel, curentDirection AND requestedDirection
    FOR requestedDirection EQUAL TO "UP"
            IF requestedDirection EQUAL TO "UP" 
ENDSEQUENCE


SEQUENCE requestLevel USING (parameters X Y Z)
    Push desired Floor Button
    Close doors
    Start moving
    If going up, destination level > current level TO move
        Else do nothing
    If going down, desination level < current level TO move
        Else do nothing        
ENDSEQUENCE


SEQUENCE elevatorOrigin USING (parametes X Y Z)
    originA = Level 1
    originB = Level 10
    If elevatorA moved THEN bring back TO originA
    If elevatorB moved THEN bring back TO originB

ENDSEQUENCE
